window.BaseLayer = class EditableBaseLayer extends BaseLayer
  constructor: (@map_name, @map_domain, @tiles_dir) ->
    @handles = []
    @markers = []
    @markers_layer = new OpenLayers.Layer.Markers( "Markers" );
    super(@map_name, @map_domain, @tiles_dir)

  onFeatureSelect: (feature) =>
    rg = @room_geometries[feature.id]
    if not rg
      return
    rg.draw_handles(@markers_layer)
    @draw_control.deactivate()
  onFeatureUnselect: (feature) =>
    rg = @room_geometries[feature.id]
    if not rg
      return
    rg.erase_handles(@markers_layer)
    @draw_control.activate()

  onFeatureDrag: (feature,pixel) =>
    rg = @room_geometries[feature.id]
    rg.sync_marker(@ol_map)
  onFeatureDragComplete: (feature,pixel) =>
    if feature.attributes.remote_id?
      @update_feature(feature)
    else if feature.attributes.is_handle?
      @update_feature(feature.layer.getFeatureById(feature.attributes.parent_id))

  onFeatureAdded: (feature) =>
    feature.attributes.user_added = 1
    rg = new RoomGeometry(feature)
    @room_geometries[feature.id] = rg
    @serialize_feature(feature)
    rg.add_marker(@marker_layer)
  onClick: (evt) =>
    msg = "click " + evt.xy
    console.log(msg)
  onDblclick = (evt) =>
    msg = "dblclick " + evt.xy
    console.log(msg)

  update_feature: (feature) ->
    mystr = @geojson.write(feature,true)
    $.ajax
      url: "/geometries/" + feature.attributes.remote_id + ".json"
      type: "PATCH"
      contentType: "application/json"
      data: JSON.stringify({"geometry": {"geometry": mystr}})
      success: (data,textStatus) ->
        alert(textStatus) if textStatus != "nocontent"

  serialize_feature: (feature) ->
    mystr = @geojson.write(feature,true)
    $.post "/geometries.json",
      {
        "geometry":
          "geometry": mystr
      }
      (data,textStatus) ->
        feature.attributes.remote_id  = data.id

  add_decoration: ->
    super()
    @ol_map.addLayers([@markers_layer])
    for feature in @polygon_layer.features
      rg = new RoomGeometry(feature)
      @room_geometries[feature.id] = rg
      rg.add_marker(@markers_layer)


  createMap: ->

    super()
    polyOptions =
      sides: 4
      snapToggle: "altKey"
      irregular: true
      keyMask: OpenLayers.Handler.MOD_SHIFT

    @draw_control = new OpenLayers.Control.DrawFeature(
      @polygon_layer,
      OpenLayers.Handler.RegularPolygon,
        handlerOptions: polyOptions
        featureAdded: this.onFeatureAdded
    )

    @ol_map.addControl(@draw_control)
    @draw_control.activate()

    dragFeature = new OpenLayers.Control.DragFeature(@polygon_layer,
      onDrag: this.onFeatureDrag
      onComplete: this.onFeatureDragComplete
      )
    @ol_map.addControl(dragFeature)
    dragFeature.activate()

    selectControl =
      new OpenLayers.Control.SelectFeature(@polygon_layer,
        hover: true
        onSelect: this.onFeatureSelect
        onUnselect: this.onFeatureUnselect
      )
    @ol_map.addControl(selectControl)
    selectControl.activate()

    snap = new OpenLayers.Control.Snapping(
      layer: @polygon_layer
      targets: [@polygon_layer]
      greedy: false
      )
    snap.activate()